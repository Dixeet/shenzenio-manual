import{_ as l,C as a,o as c,c as d,H as n,w as o,k as e,a as t,Q as u}from"./chunks/framework.9e21ba36.js";const w=JSON.parse('{"title":"MC6000 HIGH PERFORMANCE MICROCONTROLLER","description":"","frontmatter":{},"headers":[],"relativePath":"parts/mc6000.md","filePath":"parts/mc6000.md"}'),p={name:"parts/mc6000.md"},m=e("hr",null,null,-1),h=e("h1",{id:"mc6000-high-performance-microcontroller",tabindex:"-1"},[t("MC6000 "),e("br"),t("HIGH PERFORMANCE MICROCONTROLLER "),e("a",{class:"header-anchor",href:"#mc6000-high-performance-microcontroller","aria-label":'Permalink to "MC6000 <br>HIGH PERFORMANCE MICROCONTROLLER"'},"​")],-1),_=e("hr",null,null,-1),g=e("h2",{id:"description",tabindex:"-1"},[t("Description "),e("a",{class:"header-anchor",href:"#description","aria-label":'Permalink to "Description"'},"​")],-1),f=e("p",null,"Offering maximum power so you can achieve a minimum chip count, the MC6000 is the centerpiece of 诚尚Micro’s MCxxxx microcontroller family. With plenty of room for complex instructions in its expansive fourteen-line program memory, two general-purpose registers, and six pins for I/O, the MC6000 can be at the center of even your most demanding embedded applications! Contact us to request samples.",-1),x=e("h2",{id:"features",tabindex:"-1"},[t("Features "),e("a",{class:"header-anchor",href:"#features","aria-label":'Permalink to "Features"'},"​")],-1),C=e("ul",null,[e("li",null,"(14) lines of program memory"),e("li",null,"(2) general-purpose register"),e("li",null,"(4) XBus pins"),e("li",null,"(2) simple I/O pins")],-1),b=e("p",null,[t("Refer to the "),e("em",null,[e("a",{href:"/shenzenio-manual/mcxxxx-language.html"},"MCxxxx Language Reference ")]),t(" for information about programming the MC4000.")],-1),R=e("h2",{id:"pin-configuration",tabindex:"-1"},[t("Pin configuration "),e("a",{class:"header-anchor",href:"#pin-configuration","aria-label":'Permalink to "Pin configuration"'},"​")],-1),y=u('<div class="--flex --justify-center"><table><thead><tr><th style="text-align:center;">Register</th><th style="text-align:center;">Purpose</th></tr></thead><tbody><tr><td style="text-align:center;">acc</td><td style="text-align:center;">General purpose accumulator; is the target of all arithmetic instructions</td></tr><tr><td style="text-align:center;">dat</td><td style="text-align:center;">General purpose data register; used for additional on-chip storage</td></tr></tbody></table></div><p><em>NOTE: At any given time, a simple I/O pin is either in <strong>input mode</strong> or <strong>output mode</strong>. Writing a value to a pin register will put the corresponding pin into <strong>output mode</strong> with the specified output value.<br> Reading a value from a pin register will put the corresponding pin into <strong>input mode</strong>, clearing any previously set output value.</em></p>',2);function O(M,v,P,I,N,T){const r=a("WideSubtitleBlock"),i=a("TwoCols"),s=a("ImgContainer");return c(),d("div",null,[m,h,_,n(i,null,{left:o(()=>[n(r,null,{default:o(()=>[g]),_:1}),f]),right:o(()=>[n(r,null,{default:o(()=>[x]),_:1}),C,b]),_:1}),n(r,null,{default:o(()=>[R]),_:1}),n(s,{src:"/images/17.webp",alt:"MC6000"}),y])}const k=l(p,[["render",O]]);export{w as __pageData,k as default};
