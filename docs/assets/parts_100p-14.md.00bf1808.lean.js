import{_ as s,C as l,o as c,c as d,H as t,w as r,k as e,a}from"./chunks/framework.9e21ba36.js";const B=JSON.parse('{"title":"100P-14 RANDOM-ACCESS MEMORY","description":"","frontmatter":{},"headers":[],"relativePath":"parts/100p-14.md","filePath":"parts/100p-14.md"}'),u={name:"parts/100p-14.md"},m=e("hr",null,null,-1),p=e("h1",{id:"_100p-14-random-access-memory",tabindex:"-1"},[a("100P-14 "),e("br"),a("RANDOM-ACCESS MEMORY "),e("a",{class:"header-anchor",href:"#_100p-14-random-access-memory","aria-label":'Permalink to "100P-14 <br>RANDOM-ACCESS MEMORY"'},"​")],-1),h=e("hr",null,null,-1),_=e("h2",{id:"general-description",tabindex:"-1"},[a("General description "),e("a",{class:"header-anchor",href:"#general-description","aria-label":'Permalink to "General description"'},"​")],-1),f=e("p",null,[e("code",null,"100P-14"),a("random-access memory by Pingda Co. Ltd. offers embedded system engineers additional storage for today’s increasingly data-driven world with a whopping fourteen memory cells. With its convenient auto-increment feature, you won’t have to waste precious registers keeping track of memory addresses.")],-1),g=e("h2",{id:"features",tabindex:"-1"},[a("Features "),e("a",{class:"header-anchor",href:"#features","aria-label":'Permalink to "Features"'},"​")],-1),b=e("ul",null,[e("li",null,"(14) random-access memory cells"),e("li",null,"(2) independent, auto-incrementing memory pointers")],-1),y=e("h2",{id:"usage",tabindex:"-1"},[a("Usage "),e("a",{class:"header-anchor",href:"#usage","aria-label":'Permalink to "Usage"'},"​")],-1),k=e("ul",null,[e("li",null,"All memory cells initialize to a value of 0."),e("li",null,[a("All memory pointers initialize to point at the first memory cell ("),e("code",null,"address 0"),a(").")]),e("li",null,[a("Memory pointers can be read and written over XBus with the "),e("code",null,"a0"),a(" and "),e("code",null,"a1"),a(" address pins.")]),e("li",null,[a("Memory values referenced by pointers can be read and written over XBus with the "),e("code",null,"d0"),a(" and "),e("code",null,"d1"),a(" data pins.")]),e("li",null,"After reading from or writing to a data pin, the corresponding memory pointer will automatically increment to the next memory location.")],-1),v=e("h2",{id:"example-circuit-data-packet-reverser",tabindex:"-1"},[a("Example Circuit: Data Packet Reverser "),e("a",{class:"header-anchor",href:"#example-circuit-data-packet-reverser","aria-label":'Permalink to "Example Circuit: Data Packet Reverser"'},"​")],-1),w=e("p",null,[a("The following example circuit reads in 3-value packets from "),e("code",null,"input"),a(" and writes them back out to "),e("code",null,"output"),a(" in reverse order, using a "),e("code",null,"100P-14"),a(" to temporarily store the values.")],-1),x=e("br",null,null,-1);function C(P,E,M,R,S,A){const n=l("WideSubtitleBlock"),i=l("TwoCols"),o=l("ImgContainer");return c(),d("div",null,[m,p,h,t(i,null,{left:r(()=>[t(n,null,{default:r(()=>[_]),_:1}),f,t(n,null,{default:r(()=>[g]),_:1}),b]),right:r(()=>[t(n,null,{default:r(()=>[y]),_:1}),k]),_:1}),t(n,null,{default:r(()=>[v]),_:1}),w,t(o,{src:"/images/21.webp",alt:"Example Circuit: Data Packet Reverser"}),x,t(o,{src:"/images/22.webp",alt:"Example Circuit: Data Packet Reverser Signal"})])}const N=s(u,[["render",C]]);export{B as __pageData,N as default};
